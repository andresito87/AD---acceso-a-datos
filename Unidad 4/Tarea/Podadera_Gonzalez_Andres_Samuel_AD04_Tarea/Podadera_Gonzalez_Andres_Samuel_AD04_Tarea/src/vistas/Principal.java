package vistas;

import controladores.AutorController;
import controladores.CancionController;
import db.ConexionDB4O;
import java.awt.HeadlessException;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import modelos.Autor;
import modelos.Cancion;
import modelos.GeneroMusical;

/**
 * Ventana principal de la aplicación, que extiende {@link javax.swing.JFrame}.
 * 
 * <p>Esta clase representa el formulario principal de la aplicación. En ella, se manejan
 * las interacciones con el usuario y se controlan las acciones relacionadas con la
 * actualización de la información de los autores y las canciones.</p>
 * 
 * <p>Incluye componentes gráficos de la interfaz de usuario y gestiona el flujo
 * de trabajo relacionado con los modos de actualización de autor y canción.</p>
 * 
 * @author ANDRÉS SAMUEL PODADERA GONZÁLEZ
 */
public class Principal extends javax.swing.JFrame {

    private static boolean modoActualizarAutor = false;
    private static boolean modoActualizarCancion = false;
    private static String nombreAutorAModificar = "";

    /**
     * Crea una nueva instancia del formulario principal {@link Principal}.
     * Inicializa los componentes gráficos y configura la ventana.
     */
    public Principal() {
        initComponents();

        this.inicializarFrame();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenuAutores = new javax.swing.JPopupMenu();
        jMenuItemModificarAutor = new javax.swing.JMenuItem();
        jMenuItemEliminarAutor = new javax.swing.JMenuItem();
        jPopupMenuCanciones = new javax.swing.JPopupMenu();
        jMenuItemModificarCancion = new javax.swing.JMenuItem();
        jMenuItemEliminarCancion = new javax.swing.JMenuItem();
        jPanelTitulo = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButtonSalir = new javax.swing.JButton();
        jPanelAutores = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextFieldNombre = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jTextFieldNacionalidad = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jTextFieldPais = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jButtonGuardarAutor = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableAutores = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        jTextFieldPorcentajeAumento = new javax.swing.JTextField();
        jButtonAumentarSalario = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jTextFieldIngresoInicial = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jTextFieldIngresoFinal = new javax.swing.JTextField();
        jButtonConsultarAutoresEnRango = new javax.swing.JButton();
        jButtonConsultarTodosAutores = new javax.swing.JButton();
        jSpinnerAnyoNacimiento = new javax.swing.JSpinner();
        jSpinnerIngresosAnuales = new javax.swing.JSpinner();
        jButtonLimpiarAutor = new javax.swing.JButton();
        jPanelCanciones = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jTextFieldTitulo = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jComboBoxGenero = new javax.swing.JComboBox<>();
        jSpinnerDuracion = new javax.swing.JSpinner();
        jSpinnerAnyoCreacion = new javax.swing.JSpinner();
        jButtonGuardarCancion = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableCanciones = new javax.swing.JTable();
        jButtonConsultarCancionesOrdenadas = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        jTextFieldBusquedaAutor = new javax.swing.JTextField();
        jButtonConsultarCancionesDeAutor = new javax.swing.JButton();
        jButtonConsultarTodasCanciones = new javax.swing.JButton();
        jLabel17 = new javax.swing.JLabel();
        jComboBoxAutores = new javax.swing.JComboBox<>();
        jLabel18 = new javax.swing.JLabel();
        jTextFieldBusquedaAutorConNacionalidad = new javax.swing.JTextField();
        jButtonConsultarCancionesDeAutorConNacionalidad = new javax.swing.JButton();
        jButtonLimpiarCancion = new javax.swing.JButton();

        jMenuItemModificarAutor.setText("Modificar");
        jMenuItemModificarAutor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenuItemModificarAutorMousePressed(evt);
            }
        });
        jPopupMenuAutores.add(jMenuItemModificarAutor);

        jMenuItemEliminarAutor.setText("Eliminar");
        jMenuItemEliminarAutor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenuItemEliminarAutorMousePressed(evt);
            }
        });
        jPopupMenuAutores.add(jMenuItemEliminarAutor);

        jMenuItemModificarCancion.setText("Modificar");
        jMenuItemModificarCancion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenuItemModificarCancionMousePressed(evt);
            }
        });
        jPopupMenuCanciones.add(jMenuItemModificarCancion);

        jMenuItemEliminarCancion.setText("Eliminar");
        jMenuItemEliminarCancion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenuItemEliminarCancionMousePressed(evt);
            }
        });
        jPopupMenuCanciones.add(jMenuItemEliminarCancion);

        jPopupMenuCanciones.getAccessibleContext().setAccessibleParent(jTableCanciones);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanelTitulo.setBackground(new java.awt.Color(255, 204, 255));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(204, 0, 51));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Podadera's Songs Vault");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jButtonSalir.setBackground(new java.awt.Color(255, 51, 51));
        jButtonSalir.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButtonSalir.setForeground(new java.awt.Color(255, 255, 255));
        jButtonSalir.setText("Salir");
        jButtonSalir.setBorder(null);
        jButtonSalir.setBorderPainted(false);
        jButtonSalir.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSalirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelTituloLayout = new javax.swing.GroupLayout(jPanelTitulo);
        jPanelTitulo.setLayout(jPanelTituloLayout);
        jPanelTituloLayout.setHorizontalGroup(
            jPanelTituloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelTituloLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 621, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(215, 215, 215)
                .addComponent(jButtonSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14))
        );
        jPanelTituloLayout.setVerticalGroup(
            jPanelTituloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelTituloLayout.createSequentialGroup()
                .addComponent(jButtonSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanelAutores.setBackground(new java.awt.Color(204, 204, 255));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 102));
        jLabel2.setText("Autores");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setText("Nombre:");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel5.setText("Nacionalidad:");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel6.setText("País:");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel7.setText("Año Nacimiento:");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel8.setText("Ingresos Anuales:");

        jButtonGuardarAutor.setBackground(new java.awt.Color(102, 255, 102));
        jButtonGuardarAutor.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButtonGuardarAutor.setText("Guardar Autor");
        jButtonGuardarAutor.setBorder(null);
        jButtonGuardarAutor.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonGuardarAutor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGuardarAutorActionPerformed(evt);
            }
        });

        jTableAutores.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jTableAutores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Nombre", "Nacionalidad", "País", "Año Nacimiento", "Ingresos Anuales"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableAutores.setComponentPopupMenu(jPopupMenuAutores);
        jScrollPane1.setViewportView(jTableAutores);

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel9.setText("Porcentaje de Aumento de ingresos anuales:");

        jButtonAumentarSalario.setBackground(new java.awt.Color(102, 255, 102));
        jButtonAumentarSalario.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButtonAumentarSalario.setText("Aumentar");
        jButtonAumentarSalario.setBorder(null);
        jButtonAumentarSalario.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonAumentarSalario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAumentarSalarioActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel10.setText("Consultar autores con ingresos anuales entre:");

        jLabel11.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel11.setText("y");

        jButtonConsultarAutoresEnRango.setBackground(new java.awt.Color(102, 255, 102));
        jButtonConsultarAutoresEnRango.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButtonConsultarAutoresEnRango.setText("Consultar");
        jButtonConsultarAutoresEnRango.setBorder(null);
        jButtonConsultarAutoresEnRango.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonConsultarAutoresEnRango.setMaximumSize(new java.awt.Dimension(87, 23));
        jButtonConsultarAutoresEnRango.setMinimumSize(new java.awt.Dimension(87, 23));
        jButtonConsultarAutoresEnRango.setPreferredSize(new java.awt.Dimension(87, 23));
        jButtonConsultarAutoresEnRango.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConsultarAutoresEnRangoActionPerformed(evt);
            }
        });

        jButtonConsultarTodosAutores.setBackground(new java.awt.Color(102, 255, 102));
        jButtonConsultarTodosAutores.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButtonConsultarTodosAutores.setText("Consultar Todos Autores");
        jButtonConsultarTodosAutores.setBorder(null);
        jButtonConsultarTodosAutores.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonConsultarTodosAutores.setMaximumSize(new java.awt.Dimension(87, 23));
        jButtonConsultarTodosAutores.setMinimumSize(new java.awt.Dimension(87, 23));
        jButtonConsultarTodosAutores.setPreferredSize(new java.awt.Dimension(87, 23));
        jButtonConsultarTodosAutores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConsultarTodosAutoresActionPerformed(evt);
            }
        });

        jButtonLimpiarAutor.setBackground(new java.awt.Color(255, 102, 0));
        jButtonLimpiarAutor.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButtonLimpiarAutor.setText("Limpiar Autor");
        jButtonLimpiarAutor.setBorder(null);
        jButtonLimpiarAutor.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonLimpiarAutor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLimpiarAutorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelAutoresLayout = new javax.swing.GroupLayout(jPanelAutores);
        jPanelAutores.setLayout(jPanelAutoresLayout);
        jPanelAutoresLayout.setHorizontalGroup(
            jPanelAutoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelAutoresLayout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addComponent(jButtonConsultarTodosAutores, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanelAutoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10)
                    .addGroup(jPanelAutoresLayout.createSequentialGroup()
                        .addComponent(jTextFieldIngresoInicial, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldIngresoFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonConsultarAutoresEnRango, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(181, 181, 181)
                .addGroup(jPanelAutoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelAutoresLayout.createSequentialGroup()
                        .addComponent(jTextFieldPorcentajeAumento, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonAumentarSalario, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(56, 56, 56))
            .addGroup(jPanelAutoresLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanelAutoresLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanelAutoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelAutoresLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldNacionalidad, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldPais, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSpinnerAnyoNacimiento, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSpinnerIngresosAnuales, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelAutoresLayout.createSequentialGroup()
                        .addGap(405, 405, 405)
                        .addComponent(jButtonGuardarAutor, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addComponent(jButtonLimpiarAutor, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(25, 25, 25))
        );
        jPanelAutoresLayout.setVerticalGroup(
            jPanelAutoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelAutoresLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelAutoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTextFieldNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(jTextFieldNacionalidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(jTextFieldPais, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8)
                    .addComponent(jSpinnerAnyoNacimiento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSpinnerIngresosAnuales, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanelAutoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelAutoresLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelAutoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonGuardarAutor, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonLimpiarAutor, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanelAutoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelAutoresLayout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanelAutoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jButtonAumentarSalario, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextFieldPorcentajeAumento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanelAutoresLayout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanelAutoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jTextFieldIngresoInicial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel11)
                                    .addComponent(jTextFieldIngresoFinal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButtonConsultarAutoresEnRango, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(15, 15, 15))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelAutoresLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 233, Short.MAX_VALUE)
                        .addComponent(jButtonConsultarTodosAutores, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26))))
        );

        jPanelCanciones.setBackground(new java.awt.Color(255, 255, 204));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(153, 51, 0));
        jLabel3.setText("Canciones");

        jLabel12.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel12.setText("Título:");

        jLabel13.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel13.setText("Duración:");

        jLabel14.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel14.setText("Año de creación:");

        jLabel15.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel15.setText("Género:");

        jComboBoxGenero.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Clasica", "Jazz", "Reggaeton", "Rap", "Pop", "Electronica", "Indie" }));

        jButtonGuardarCancion.setBackground(new java.awt.Color(102, 255, 102));
        jButtonGuardarCancion.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButtonGuardarCancion.setText("Guardar Canción");
        jButtonGuardarCancion.setBorder(null);
        jButtonGuardarCancion.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonGuardarCancion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGuardarCancionActionPerformed(evt);
            }
        });

        jTableCanciones.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jTableCanciones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Id", "Título", "Duración", "Año de creación", "Género", "Autor"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableCanciones.setComponentPopupMenu(jPopupMenuCanciones);
        jScrollPane2.setViewportView(jTableCanciones);

        jButtonConsultarCancionesOrdenadas.setBackground(new java.awt.Color(102, 255, 102));
        jButtonConsultarCancionesOrdenadas.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButtonConsultarCancionesOrdenadas.setText("Consultar Canciones Ordenadas Por Título");
        jButtonConsultarCancionesOrdenadas.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonConsultarCancionesOrdenadas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConsultarCancionesOrdenadasActionPerformed(evt);
            }
        });

        jLabel16.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel16.setText("Autor:");

        jButtonConsultarCancionesDeAutor.setBackground(new java.awt.Color(102, 255, 102));
        jButtonConsultarCancionesDeAutor.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButtonConsultarCancionesDeAutor.setText("Consultar canciones");
        jButtonConsultarCancionesDeAutor.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonConsultarCancionesDeAutor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConsultarCancionesDeAutorActionPerformed(evt);
            }
        });

        jButtonConsultarTodasCanciones.setBackground(new java.awt.Color(102, 255, 102));
        jButtonConsultarTodasCanciones.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButtonConsultarTodasCanciones.setText("Consultar Todas Canciones");
        jButtonConsultarTodasCanciones.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonConsultarTodasCanciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConsultarTodasCancionesActionPerformed(evt);
            }
        });

        jLabel17.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel17.setText("Autor:");

        jComboBoxAutores.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel18.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel18.setText("Nacionalidad del autor:");

        jButtonConsultarCancionesDeAutorConNacionalidad.setBackground(new java.awt.Color(102, 255, 102));
        jButtonConsultarCancionesDeAutorConNacionalidad.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButtonConsultarCancionesDeAutorConNacionalidad.setText("Consultar canciones");
        jButtonConsultarCancionesDeAutorConNacionalidad.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonConsultarCancionesDeAutorConNacionalidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConsultarCancionesDeAutorConNacionalidadActionPerformed(evt);
            }
        });

        jButtonLimpiarCancion.setBackground(new java.awt.Color(255, 102, 0));
        jButtonLimpiarCancion.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButtonLimpiarCancion.setText("Limpiar Canción");
        jButtonLimpiarCancion.setBorder(null);
        jButtonLimpiarCancion.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonLimpiarCancion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLimpiarCancionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelCancionesLayout = new javax.swing.GroupLayout(jPanelCanciones);
        jPanelCanciones.setLayout(jPanelCancionesLayout);
        jPanelCancionesLayout.setHorizontalGroup(
            jPanelCancionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCancionesLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanelCancionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelCancionesLayout.createSequentialGroup()
                        .addComponent(jButtonConsultarTodasCanciones)
                        .addGap(28, 28, 28)
                        .addComponent(jButtonConsultarCancionesOrdenadas)
                        .addGap(30, 30, 30)
                        .addComponent(jLabel16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldBusquedaAutor, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonConsultarCancionesDeAutor, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                        .addComponent(jLabel18)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldBusquedaAutorConNacionalidad, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonConsultarCancionesDeAutorConNacionalidad)
                        .addGap(16, 16, 16))
                    .addGroup(jPanelCancionesLayout.createSequentialGroup()
                        .addGroup(jPanelCancionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelCancionesLayout.createSequentialGroup()
                                .addGroup(jPanelCancionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanelCancionesLayout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(jPanelCancionesLayout.createSequentialGroup()
                                        .addGap(55, 55, 55)
                                        .addComponent(jLabel12)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextFieldTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(84, 84, 84)
                                        .addComponent(jLabel13)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jSpinnerDuracion, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(jLabel14)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jSpinnerAnyoCreacion, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(70, 70, 70))
                                    .addGroup(jPanelCancionesLayout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(jLabel15)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jComboBoxGenero, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(158, 158, 158)
                                        .addComponent(jLabel17)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jComboBoxAutores, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(118, 118, 118)))
                                .addGroup(jPanelCancionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButtonLimpiarCancion, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButtonGuardarCancion, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(10, 10, 10)))
                        .addGap(26, 26, 26))))
        );
        jPanelCancionesLayout.setVerticalGroup(
            jPanelCancionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCancionesLayout.createSequentialGroup()
                .addGroup(jPanelCancionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelCancionesLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addGroup(jPanelCancionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(jTextFieldTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13)
                            .addComponent(jLabel14)
                            .addComponent(jSpinnerAnyoCreacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSpinnerDuracion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanelCancionesLayout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jButtonGuardarCancion, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelCancionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(jComboBoxAutores, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15)
                    .addComponent(jComboBoxGenero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonLimpiarCancion, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17)
                .addGroup(jPanelCancionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelCancionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel18)
                        .addComponent(jTextFieldBusquedaAutorConNacionalidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonConsultarCancionesDeAutorConNacionalidad, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonConsultarCancionesDeAutor, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextFieldBusquedaAutor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel16))
                    .addGroup(jPanelCancionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonConsultarTodasCanciones, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonConsultarCancionesOrdenadas, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelTitulo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanelAutores, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanelCanciones, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanelTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelAutores, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelCanciones, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonAumentarSalarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAumentarSalarioActionPerformed

        try {
            int porcentaje = Integer.parseInt(this.jTextFieldPorcentajeAumento.getText());

            if (porcentaje > 0) { // sólo se comtenplan aumentos de ingresos, no descuentos
                boolean resultado = AutorController.aumentarIngresosEnPorcentaje(porcentaje);

                if (resultado) {
                    this.listarAutores();
                    JOptionPane.showMessageDialog(null, "Ingresos aumentados un " + porcentaje + " % para todos los autores.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(null, "Error en la operación de aumento de ingresos anuales", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(null, "La cantidad debe ser un número entero positivo", "Aviso", JOptionPane.WARNING_MESSAGE);
            }
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(null, "Revisa la información introducida como porcentaje de aumento", "Aviso", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jButtonAumentarSalarioActionPerformed

    private void jButtonConsultarAutoresEnRangoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConsultarAutoresEnRangoActionPerformed

        if (!this.jTextFieldIngresoInicial.getText().isEmpty() && !this.jTextFieldIngresoFinal.getText().isEmpty()) {
            try {
                int cantidadInicial = Integer.parseInt(this.jTextFieldIngresoInicial.getText());
                int cantidadFinal = Integer.parseInt(this.jTextFieldIngresoFinal.getText());

                if (cantidadInicial != 0 && cantidadFinal != 0 && cantidadInicial <= cantidadFinal) {
                    List<Autor> autoresEnRango = AutorController.obtenerAutoresConSalarioEntre(cantidadInicial, cantidadFinal);

                    // Obtener el modelo de la tabla y limpiarlo antes de agregar nuevos datos
                    DefaultTableModel modelo = (DefaultTableModel) jTableAutores.getModel();
                    modelo.setRowCount(0); // Limpiar la tabla antes de actualizarla

                    // Recorrer la lista de canciones y agregarlas a la tabla
                    for (Autor autor : autoresEnRango) {
                        Object[] fila = {
                            autor.getNombre(), // Columna 1: Nombre
                            autor.getNacionalidad(), // Columna 2: Nacionalidad
                            autor.getPaisResidencia(), // Columna 3: País de residencia
                            autor.getAnyoDeNacimiento(), // Columna 4: Año de nacimiento
                            autor.getIngresosAnuales()// Columna 5: Ingresos anuales
                        };
                        modelo.addRow(fila); // Agregar la fila a la tabla
                    }

                } else {
                    JOptionPane.showMessageDialog(null, "Revisa las cantidades de ingresos introducidas, la inicial no puede ser mayor a la final", "Aviso", JOptionPane.WARNING_MESSAGE);
                }
            } catch (HeadlessException | NumberFormatException ex) {
                System.out.println("Error en la recepcion de los rangos de ingresos anuales. " + ex.getMessage());
                JOptionPane.showMessageDialog(null, "Revisa las cantidades de ingresos introducidas, deben ser números enteros", "Aviso", JOptionPane.WARNING_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Revisa las cantidades de ingresos introducidas, falta alguna", "Aviso", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jButtonConsultarAutoresEnRangoActionPerformed

    private void jButtonConsultarTodosAutoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConsultarTodosAutoresActionPerformed
        this.listarAutores();
    }//GEN-LAST:event_jButtonConsultarTodosAutoresActionPerformed

    private void jButtonSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSalirActionPerformed
        String[] opciones = {"Sí", "No"};

        int confirmacion = JOptionPane.showOptionDialog(
                this,
                "¿Estás seguro de que deseas salir?",
                "Confirmar salida",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                opciones,
                opciones[1] // Opción por defecto: "No"
        );

        if (confirmacion == JOptionPane.YES_OPTION) {
            ConexionDB4O.cerrar(); // Cierra la base de datos
            this.dispose(); // Cierra la ventana
        }
    }//GEN-LAST:event_jButtonSalirActionPerformed

    private void jButtonConsultarTodasCancionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConsultarTodasCancionesActionPerformed
        this.listarCanciones();
    }//GEN-LAST:event_jButtonConsultarTodasCancionesActionPerformed

    private void jMenuItemEliminarCancionMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItemEliminarCancionMousePressed

        String[] opciones = {"Sí", "No"};

        if (hayCancionSeleccionada()) {
            int filaSeleccionada = jTableCanciones.getSelectedRow();

            DefaultTableModel modelo = (DefaultTableModel) jTableCanciones.getModel();
            String idCancion = modelo.getValueAt(filaSeleccionada, 0).toString(); // Obtener el ID de la canción
            String nombreCancion = modelo.getValueAt(filaSeleccionada, 1).toString(); // Obtener el nombre de la canción

            int confirmacion = JOptionPane.showOptionDialog(
                    this,
                    "¿Estás seguro de que quieres eliminar la canción \"" + nombreCancion + "\"?",
                    "Confirmar eliminación",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.WARNING_MESSAGE,
                    null,
                    opciones,
                    opciones[1] // Opción por defecto: "No"
            );

            if (confirmacion == JOptionPane.YES_OPTION) {

                boolean resultado = CancionController.eliminar(idCancion);

                if (resultado) {
                    JOptionPane.showMessageDialog(null, "Canción eliminada correctamente de la base de datos DB4O", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(null, "La canción seleccionada no existe", "Error", JOptionPane.ERROR_MESSAGE);
                }
                this.listarCanciones();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Primero, debes seleccionar una canción", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jMenuItemEliminarCancionMousePressed

    private void jButtonGuardarAutorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGuardarAutorActionPerformed
        String nombre = this.jTextFieldNombre.getText();
        String nacionalidad = this.jTextFieldNacionalidad.getText();
        String paisResidencia = this.jTextFieldPais.getText();
        int anyoNacimiento = Integer.parseInt(this.jSpinnerAnyoNacimiento.getValue().toString());
        int ingresosAnuales = Integer.parseInt(this.jSpinnerIngresosAnuales.getValue().toString());

        if (!nombre.isEmpty() && !nacionalidad.isEmpty() && !paisResidencia.isEmpty() && anyoNacimiento > 0 && ingresosAnuales > 0) {

            boolean resultado;
            if (modoActualizarAutor) {
                Autor autorModificado = new Autor(nombre, nacionalidad, paisResidencia, anyoNacimiento, ingresosAnuales);
                resultado = AutorController.modificar(nombreAutorAModificar, autorModificado);
            } else {
                Autor nuevoAutor = new Autor(nombre, nacionalidad, paisResidencia, anyoNacimiento, ingresosAnuales);
                resultado = AutorController.guardar(nuevoAutor);
            }

            if (resultado && modoActualizarAutor) {
                JOptionPane.showMessageDialog(null, "Autor actualizado correctamente en la base de datos DB4O", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                modoActualizarAutor = false;
                nombreAutorAModificar = "";
            } else if (resultado && !modoActualizarAutor) {
                JOptionPane.showMessageDialog(null, "Autor almacenado correctamente en la base de datos DB4O", "Éxito", JOptionPane.INFORMATION_MESSAGE);
            }
            this.limpiarFormularioAutor();
            this.listarAutores();
            this.listarCanciones();
            this.rellenarComboBoxAutores();
        } else {
            JOptionPane.showMessageDialog(null, "Revisa la información introducida para almacenar el autor", "Aviso", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jButtonGuardarAutorActionPerformed

    private void jButtonGuardarCancionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGuardarCancionActionPerformed
        String titulo = this.jTextFieldTitulo.getText();
        int duracion = Integer.parseInt(this.jSpinnerDuracion.getValue().toString());
        int anyo_creacion = Integer.parseInt(this.jSpinnerAnyoCreacion.getValue().toString());
        String genero = GeneroMusical.valueOf(this.jComboBoxGenero.getSelectedItem().toString().toUpperCase()).toString();
        String nombreAutor = this.jComboBoxAutores.getSelectedItem().toString();

        Autor autor = AutorController.obtener(nombreAutor);

        if (!titulo.isEmpty() && duracion != 0 && anyo_creacion > 0 && autor != null) {
            Cancion nuevaCancion = new Cancion(titulo, duracion, anyo_creacion, genero, autor);

            // Si es una edición de canción, agregar el id de la canción seleccionada para ser editada
            if (modoActualizarCancion) {
                int filaSeleccionada = jTableCanciones.getSelectedRow();
                DefaultTableModel modelo = (DefaultTableModel) jTableCanciones.getModel();
                String idCancion = modelo.getValueAt(filaSeleccionada, 0).toString(); // Obtener el id de la canción
                nuevaCancion.setIdentificador(idCancion);
            }

            boolean resultado = CancionController.guardar(nuevaCancion);

            if (resultado && modoActualizarCancion) {
                JOptionPane.showMessageDialog(null, "Canción actualizada correctamente en la base de datos DB4O", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                modoActualizarCancion = false;
            } else if (resultado && !modoActualizarCancion) {
                JOptionPane.showMessageDialog(null, "Canción almacenada correctamente en la base de datos DB4O", "Éxito", JOptionPane.INFORMATION_MESSAGE);
            }
            this.limpiarFormularioCancion();
            this.listarCanciones();
        } else {
            JOptionPane.showMessageDialog(null, "Revisa la información introducida para almacenar la canción", "Aviso", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jButtonGuardarCancionActionPerformed

    private void jMenuItemEliminarAutorMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItemEliminarAutorMousePressed
        String[] opciones = {"Sí", "No"};

        if (hayAutorSeleccionado()) {
            int filaSeleccionada = jTableAutores.getSelectedRow();
            DefaultTableModel modelo = (DefaultTableModel) jTableAutores.getModel();
            String nombreAutor = modelo.getValueAt(filaSeleccionada, 0).toString(); // Obtener el nombre del autor

            int confirmacion = JOptionPane.showOptionDialog(
                    this,
                    "¿Estás seguro de que quieres eliminar al autor \"" + nombreAutor + "\"?",
                    "Confirmar eliminación",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.WARNING_MESSAGE,
                    null,
                    opciones,
                    opciones[1] // Opción por defecto: "No"
            );

            if (confirmacion == JOptionPane.YES_OPTION) {
                boolean resultado = AutorController.eliminar(nombreAutor);

                if (resultado) {
                    JOptionPane.showMessageDialog(this, "Autor eliminado correctamente de la base de datos DB4O", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, "No se puede eliminar un autor con canciones asociadas", "Error", JOptionPane.ERROR_MESSAGE);
                }
                this.listarAutores();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Primero, debes seleccionar un autor", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jMenuItemEliminarAutorMousePressed

    private void jMenuItemModificarAutorMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItemModificarAutorMousePressed
        if (hayAutorSeleccionado()) {
            modoActualizarAutor = true;
            int filaSeleccionada = jTableAutores.getSelectedRow();

            DefaultTableModel modelo = (DefaultTableModel) jTableAutores.getModel();
            String nombreAutor = modelo.getValueAt(filaSeleccionada, 0).toString(); // Obtener el nombre
            nombreAutorAModificar = nombreAutor;
            String nacionalidad = modelo.getValueAt(filaSeleccionada, 1).toString(); // Obtener el nacionalidad
            String paisResidencia = modelo.getValueAt(filaSeleccionada, 2).toString(); // Obtener el país de residencia
            int anyoNacimiento = Integer.parseInt(modelo.getValueAt(filaSeleccionada, 3).toString()); // Obtener el año de nacimiento
            int ingresosAnuales = Integer.parseInt(modelo.getValueAt(filaSeleccionada, 4).toString()); // Obtener los ingresos anuales

            this.jTextFieldNombre.setText(nombreAutor);
            this.jTextFieldNacionalidad.setText(nacionalidad);
            this.jTextFieldPais.setText(paisResidencia);
            this.jSpinnerAnyoNacimiento.setValue(anyoNacimiento);
            this.jSpinnerIngresosAnuales.setValue(ingresosAnuales);

        } else {
            JOptionPane.showMessageDialog(this, "Primero, debes seleccionar un autor", "Aviso", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jMenuItemModificarAutorMousePressed

    private void jMenuItemModificarCancionMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItemModificarCancionMousePressed
        if (hayCancionSeleccionada()) {
            modoActualizarCancion = true;
            int filaSeleccionada = jTableCanciones.getSelectedRow();

            DefaultTableModel modelo = (DefaultTableModel) jTableCanciones.getModel();
            //String id = modelo.getValueAt(filaSeleccionada, 0).toString(); // Obtener el identificador
            String titulo = modelo.getValueAt(filaSeleccionada, 1).toString(); // Obtener el título
            int duracion = Integer.parseInt(modelo.getValueAt(filaSeleccionada, 2).toString()); // Obtener la duracion
            int anyoDeCreacion = Integer.parseInt(modelo.getValueAt(filaSeleccionada, 3).toString()); // Obtener el año de creación
            String genero = modelo.getValueAt(filaSeleccionada, 4).toString(); // Obtener el género
            String nombreAutor = modelo.getValueAt(filaSeleccionada, 5).toString(); // Obtener el nombre del autor de la canción

            this.jTextFieldTitulo.setText(titulo);
            this.jSpinnerDuracion.setValue(duracion);
            this.jSpinnerAnyoCreacion.setValue(anyoDeCreacion);

            // Seleccionar el género en el JComboBox
            for (int i = 0; i < jComboBoxGenero.getItemCount(); i++) {
                if (jComboBoxGenero.getItemAt(i).equalsIgnoreCase(genero)) {
                    jComboBoxGenero.setSelectedIndex(i);
                    break;
                }
            }

            // Seleccionar el autor en el JComboBox
            boolean autorEncontrado = false;
            for (int i = 0; i < jComboBoxAutores.getItemCount(); i++) {
                if (jComboBoxAutores.getItemAt(i).equalsIgnoreCase(nombreAutor)) {
                    jComboBoxAutores.setSelectedIndex(i);
                    autorEncontrado = true;
                    break;
                }
            }

            // Si el autor no se encuentra en el JComboBox, agregarlo
            if (!autorEncontrado) {
                jComboBoxAutores.setSelectedItem(nombreAutor);
            }

        } else {
            JOptionPane.showMessageDialog(this, "Primero, debes seleccionar una canción", "Aviso", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jMenuItemModificarCancionMousePressed

    private void jButtonConsultarCancionesOrdenadasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConsultarCancionesOrdenadasActionPerformed
        List<Cancion> canciones = CancionController.obtenerTodasOrdenadasPorTitulo();

        // Obtener el modelo de la tabla y limpiarlo antes de agregar nuevos datos
        DefaultTableModel modelo = (DefaultTableModel) jTableCanciones.getModel();
        modelo.setRowCount(0); // Limpiar la tabla antes de actualizarla

        // Recorrer la lista de canciones y agregarlas a la tabla
        for (Cancion cancion : canciones) {
            Object[] fila = {
                cancion.getIdentificador(), // Columna 1: ID
                cancion.getTitulo(), // Columna 2: Título
                cancion.getDuracion(), // Columna 3: Duración
                cancion.getAnyoCreacion(), // Columna 4: Año de creación
                cancion.getGenero().toString(), // Columna 5: Género
                cancion.getAutor().getNombre() // Columna 6: Autor
            };
            modelo.addRow(fila); // Agregar la fila a la tabla
        }
    }//GEN-LAST:event_jButtonConsultarCancionesOrdenadasActionPerformed

    private void jButtonConsultarCancionesDeAutorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConsultarCancionesDeAutorActionPerformed
        String nombreAutor = this.jTextFieldBusquedaAutor.getText();

        if (!nombreAutor.trim().isEmpty()) {

            List<Cancion> canciones = CancionController.obtenerTodasDelAutor(nombreAutor);

            if (!canciones.isEmpty()) {

                // Obtener el modelo de la tabla y limpiarlo antes de agregar nuevos datos
                DefaultTableModel modelo = (DefaultTableModel) jTableCanciones.getModel();
                modelo.setRowCount(0); // Limpiar la tabla antes de actualizarla

                // Recorrer la lista de canciones y agregarlas a la tabla
                for (Cancion cancion : canciones) {
                    Object[] fila = {
                        cancion.getIdentificador(), // Columna 1: ID
                        cancion.getTitulo(), // Columna 2: Título
                        cancion.getDuracion(), // Columna 3: Duración
                        cancion.getAnyoCreacion(), // Columna 4: Año de creación
                        cancion.getGenero().toString(), // Columna 5: Género
                        cancion.getAutor().getNombre() // Columna 6: Autor
                    };
                    modelo.addRow(fila); // Agregar la fila a la tabla
                }
            } else {
                JOptionPane.showMessageDialog(this, "El autor " + nombreAutor + " no tiene canciones asociadas.", "Aviso", JOptionPane.WARNING_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Revisa la información introducida, el nombre del autor no puede estar vacío", "Aviso", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jButtonConsultarCancionesDeAutorActionPerformed

    private void jButtonConsultarCancionesDeAutorConNacionalidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConsultarCancionesDeAutorConNacionalidadActionPerformed
        String nacionalidad = this.jTextFieldBusquedaAutorConNacionalidad.getText();

        if (!nacionalidad.trim().isEmpty()) {

            List<Cancion> canciones = CancionController.obtenerTodasDelAutorConNacionalidad(nacionalidad);

            if (!canciones.isEmpty()) {

                // Obtener el modelo de la tabla y limpiarlo antes de agregar nuevos datos
                DefaultTableModel modelo = (DefaultTableModel) jTableCanciones.getModel();
                modelo.setRowCount(0); // Limpiar la tabla antes de actualizarla

                // Recorrer la lista de canciones y agregarlas a la tabla
                for (Cancion cancion : canciones) {
                    Object[] fila = {
                        cancion.getIdentificador(), // Columna 1: ID
                        cancion.getTitulo(), // Columna 2: Título
                        cancion.getDuracion(), // Columna 3: Duración
                        cancion.getAnyoCreacion(), // Columna 4: Año de creación
                        cancion.getGenero().toString(), // Columna 5: Género
                        cancion.getAutor().getNombre() // Columna 6: Autor
                    };
                    modelo.addRow(fila); // Agregar la fila a la tabla
                }
            } else {
                JOptionPane.showMessageDialog(this, "No hay canciones con autores de la nacionalidad " + nacionalidad + ".", "Aviso", JOptionPane.WARNING_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Revisa la información introducida, la nacionalidad del autor no puede estar vacía", "Aviso", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jButtonConsultarCancionesDeAutorConNacionalidadActionPerformed

    private void jButtonLimpiarAutorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLimpiarAutorActionPerformed
        // TODO add your handling code here:
        this.jTextFieldNombre.setText("");
        this.jTextFieldNacionalidad.setText("");
        this.jTextFieldPais.setText("");
        this.jSpinnerAnyoNacimiento.setValue(2000);
        this.jSpinnerIngresosAnuales.setValue(0);
        nombreAutorAModificar = "";
        modoActualizarAutor = false;
    }//GEN-LAST:event_jButtonLimpiarAutorActionPerformed

    private void jButtonLimpiarCancionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLimpiarCancionActionPerformed
        // TODO add your handling code here:
        this.jTextFieldTitulo.setText("");
        this.jSpinnerAnyoCreacion.setValue(2000);
        this.jSpinnerDuracion.setValue(0);
        this.jComboBoxGenero.setSelectedIndex(0);
        this.jComboBoxAutores.setSelectedIndex(0);
        modoActualizarCancion = false;
    }//GEN-LAST:event_jButtonLimpiarCancionActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Principal().setVisible(true);
        });
    }

    private void listarAutores() {
        List<Autor> autores = AutorController.obtenerTodos();

        // Obtener el modelo de la tabla y limpiarlo antes de agregar nuevos datos
        DefaultTableModel modelo = (DefaultTableModel) jTableAutores.getModel();
        modelo.setRowCount(0); // Limpiar la tabla antes de actualizarla

        // Recorrer la lista de canciones y agregarlas a la tabla
        for (Autor autor : autores) {
            Object[] fila = {
                autor.getNombre(), // Columna 1: Nombre
                autor.getNacionalidad(), // Columna 2: Nacionalidad
                autor.getPaisResidencia(), // Columna 3: País de residencia
                autor.getAnyoDeNacimiento(), // Columna 4: Año de nacimiento
                autor.getIngresosAnuales()// Columna 5: Ingresos anuales
            };
            modelo.addRow(fila); // Agregar la fila a la tabla
        }

        // actualizo la combobox de autores a elegir de las canciones
        this.rellenarComboBoxAutores();
    }

    private void listarCanciones() {
        List<Cancion> canciones = CancionController.obtenerTodas();

        // Obtener el modelo de la tabla y limpiarlo antes de agregar nuevos datos
        DefaultTableModel modelo = (DefaultTableModel) jTableCanciones.getModel();
        modelo.setRowCount(0); // Limpiar la tabla antes de actualizarla

        // Recorrer la lista de canciones y agregarlas a la tabla
        for (Cancion cancion : canciones) {
            Object[] fila = {
                cancion.getIdentificador(), // Columna 1: ID
                cancion.getTitulo(), // Columna 2: Título
                cancion.getDuracion(), // Columna 3: Duración
                cancion.getAnyoCreacion(), // Columna 4: Año de creación
                cancion.getGenero().toString(), // Columna 5: Género
                cancion.getAutor().getNombre() // Columna 6: Autor
            };
            modelo.addRow(fila); // Agregar la fila a la tabla
        }
    }

    private boolean hayCancionSeleccionada() {
        return this.jTableCanciones.getSelectedRow() != -1;
    }

    private boolean hayAutorSeleccionado() {
        return this.jTableAutores.getSelectedRow() != -1;
    }

    private void rellenarComboBoxAutores() {
        // Obtener la lista de autores desde la base de datos
        List<Autor> autores = AutorController.obtenerTodos();

        // Limpiar el JComboBox antes de agregar nuevos datos
        jComboBoxAutores.removeAllItems();

        // Verificar si hay autores en la lista
        if (autores.isEmpty()) {
            jComboBoxAutores.addItem("No hay autores disponibles");
        } else {
            for (Autor autor : autores) {
                jComboBoxAutores.addItem(autor.getNombre()); // Agregar cada nombre al ComboBox
            }
        }

    }

    private void inicializarFrame() {
        // Seteo de valor de título y posición del frame
        this.setTitle("Podadera's Songs Vault");
        this.setLocationRelativeTo(null);

        // Inicializacion de valores de los spinners
        this.jSpinnerAnyoNacimiento.setValue(2000);
        this.jSpinnerAnyoCreacion.setValue(2000);

        // Mostrar todas las canciones
        this.listarCanciones();

        // Mostrar todos los autores y Cargar autores en combobox autores de las canciones
        this.listarAutores();

        // Evento para cerrar la base de datos al cerrar la ventana
        this.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent evt) {
                ConexionDB4O.cerrar();
            }
        });
    }

    private void limpiarFormularioAutor() {
        this.jTextFieldNombre.setText("");
        this.jTextFieldNacionalidad.setText("");
        this.jTextFieldPais.setText("");
        this.jSpinnerAnyoNacimiento.setValue(2000);
        this.jSpinnerIngresosAnuales.setValue(0);
    }

    private void limpiarFormularioCancion() {
        this.jTextFieldTitulo.setText("");
        this.jSpinnerDuracion.setValue(0);
        this.jSpinnerAnyoCreacion.setValue(2000);
        this.jComboBoxGenero.setSelectedIndex(0);
        this.jComboBoxAutores.setSelectedIndex(0);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAumentarSalario;
    private javax.swing.JButton jButtonConsultarAutoresEnRango;
    private javax.swing.JButton jButtonConsultarCancionesDeAutor;
    private javax.swing.JButton jButtonConsultarCancionesDeAutorConNacionalidad;
    private javax.swing.JButton jButtonConsultarCancionesOrdenadas;
    private javax.swing.JButton jButtonConsultarTodasCanciones;
    private javax.swing.JButton jButtonConsultarTodosAutores;
    private javax.swing.JButton jButtonGuardarAutor;
    private javax.swing.JButton jButtonGuardarCancion;
    private javax.swing.JButton jButtonLimpiarAutor;
    private javax.swing.JButton jButtonLimpiarCancion;
    private javax.swing.JButton jButtonSalir;
    private javax.swing.JComboBox<String> jComboBoxAutores;
    private javax.swing.JComboBox<String> jComboBoxGenero;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuItem jMenuItemEliminarAutor;
    private javax.swing.JMenuItem jMenuItemEliminarCancion;
    private javax.swing.JMenuItem jMenuItemModificarAutor;
    private javax.swing.JMenuItem jMenuItemModificarCancion;
    private javax.swing.JPanel jPanelAutores;
    private javax.swing.JPanel jPanelCanciones;
    private javax.swing.JPanel jPanelTitulo;
    private javax.swing.JPopupMenu jPopupMenuAutores;
    private javax.swing.JPopupMenu jPopupMenuCanciones;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSpinner jSpinnerAnyoCreacion;
    private javax.swing.JSpinner jSpinnerAnyoNacimiento;
    private javax.swing.JSpinner jSpinnerDuracion;
    private javax.swing.JSpinner jSpinnerIngresosAnuales;
    private javax.swing.JTable jTableAutores;
    private javax.swing.JTable jTableCanciones;
    private javax.swing.JTextField jTextFieldBusquedaAutor;
    private javax.swing.JTextField jTextFieldBusquedaAutorConNacionalidad;
    private javax.swing.JTextField jTextFieldIngresoFinal;
    private javax.swing.JTextField jTextFieldIngresoInicial;
    private javax.swing.JTextField jTextFieldNacionalidad;
    private javax.swing.JTextField jTextFieldNombre;
    private javax.swing.JTextField jTextFieldPais;
    private javax.swing.JTextField jTextFieldPorcentajeAumento;
    private javax.swing.JTextField jTextFieldTitulo;
    // End of variables declaration//GEN-END:variables
}
